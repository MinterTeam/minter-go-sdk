// Code generated by go-swagger; DO NOT EDIT.

package api_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAPIServiceEventsParams creates a new APIServiceEventsParams object
// with the default values initialized.
func NewAPIServiceEventsParams() *APIServiceEventsParams {
	var ()
	return &APIServiceEventsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAPIServiceEventsParamsWithTimeout creates a new APIServiceEventsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAPIServiceEventsParamsWithTimeout(timeout time.Duration) *APIServiceEventsParams {
	var ()
	return &APIServiceEventsParams{

		timeout: timeout,
	}
}

// NewAPIServiceEventsParamsWithContext creates a new APIServiceEventsParams object
// with the default values initialized, and the ability to set a context for a request
func NewAPIServiceEventsParamsWithContext(ctx context.Context) *APIServiceEventsParams {
	var ()
	return &APIServiceEventsParams{

		Context: ctx,
	}
}

// NewAPIServiceEventsParamsWithHTTPClient creates a new APIServiceEventsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAPIServiceEventsParamsWithHTTPClient(client *http.Client) *APIServiceEventsParams {
	var ()
	return &APIServiceEventsParams{
		HTTPClient: client,
	}
}

/*APIServiceEventsParams contains all the parameters to send to the API endpoint
for the Api service events operation typically these are written to a http.Request
*/
type APIServiceEventsParams struct {

	/*Height*/
	Height string
	/*Search*/
	Search []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the Api service events params
func (o *APIServiceEventsParams) WithTimeout(timeout time.Duration) *APIServiceEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the Api service events params
func (o *APIServiceEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the Api service events params
func (o *APIServiceEventsParams) WithContext(ctx context.Context) *APIServiceEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the Api service events params
func (o *APIServiceEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the Api service events params
func (o *APIServiceEventsParams) WithHTTPClient(client *http.Client) *APIServiceEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the Api service events params
func (o *APIServiceEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHeight adds the height to the Api service events params
func (o *APIServiceEventsParams) WithHeight(height string) *APIServiceEventsParams {
	o.SetHeight(height)
	return o
}

// SetHeight adds the height to the Api service events params
func (o *APIServiceEventsParams) SetHeight(height string) {
	o.Height = height
}

// WithSearch adds the search to the Api service events params
func (o *APIServiceEventsParams) WithSearch(search []string) *APIServiceEventsParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the Api service events params
func (o *APIServiceEventsParams) SetSearch(search []string) {
	o.Search = search
}

// WriteToRequest writes these params to a swagger request
func (o *APIServiceEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param height
	if err := r.SetPathParam("height", o.Height); err != nil {
		return err
	}

	valuesSearch := o.Search

	joinedSearch := swag.JoinByFormat(valuesSearch, "multi")
	// query array param search
	if err := r.SetQueryParam("search", joinedSearch...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
