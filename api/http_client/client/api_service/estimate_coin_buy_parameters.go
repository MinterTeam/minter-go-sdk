// Code generated by go-swagger; DO NOT EDIT.

package api_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewEstimateCoinBuyParams creates a new EstimateCoinBuyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewEstimateCoinBuyParams() *EstimateCoinBuyParams {
	return &EstimateCoinBuyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewEstimateCoinBuyParamsWithTimeout creates a new EstimateCoinBuyParams object
// with the ability to set a timeout on a request.
func NewEstimateCoinBuyParamsWithTimeout(timeout time.Duration) *EstimateCoinBuyParams {
	return &EstimateCoinBuyParams{
		timeout: timeout,
	}
}

// NewEstimateCoinBuyParamsWithContext creates a new EstimateCoinBuyParams object
// with the ability to set a context for a request.
func NewEstimateCoinBuyParamsWithContext(ctx context.Context) *EstimateCoinBuyParams {
	return &EstimateCoinBuyParams{
		Context: ctx,
	}
}

// NewEstimateCoinBuyParamsWithHTTPClient creates a new EstimateCoinBuyParams object
// with the ability to set a custom HTTPClient for a request.
func NewEstimateCoinBuyParamsWithHTTPClient(client *http.Client) *EstimateCoinBuyParams {
	return &EstimateCoinBuyParams{
		HTTPClient: client,
	}
}

/* EstimateCoinBuyParams contains all the parameters to send to the API endpoint
   for the estimate coin buy operation.

   Typically these are written to a http.Request.
*/
type EstimateCoinBuyParams struct {

	// CoinCommission.
	CoinCommission *string

	// CoinIDCommission.
	//
	// Format: uint64
	CoinIDCommission *uint64

	// CoinIDToBuy.
	//
	// Format: uint64
	CoinIDToBuy *uint64

	// CoinIDToSell.
	//
	// Format: uint64
	CoinIDToSell *uint64

	// CoinToBuy.
	CoinToBuy *string

	// CoinToSell.
	CoinToSell *string

	// Height.
	//
	// Format: uint64
	Height *uint64

	// Route.
	Route []string

	// SwapFrom.
	//
	// Default: "optimal"
	SwapFrom *string

	// ValueToBuy.
	ValueToBuy string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the estimate coin buy params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EstimateCoinBuyParams) WithDefaults() *EstimateCoinBuyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the estimate coin buy params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EstimateCoinBuyParams) SetDefaults() {
	var (
		swapFromDefault = string("optimal")
	)

	val := EstimateCoinBuyParams{
		SwapFrom: &swapFromDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the estimate coin buy params
func (o *EstimateCoinBuyParams) WithTimeout(timeout time.Duration) *EstimateCoinBuyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the estimate coin buy params
func (o *EstimateCoinBuyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the estimate coin buy params
func (o *EstimateCoinBuyParams) WithContext(ctx context.Context) *EstimateCoinBuyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the estimate coin buy params
func (o *EstimateCoinBuyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the estimate coin buy params
func (o *EstimateCoinBuyParams) WithHTTPClient(client *http.Client) *EstimateCoinBuyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the estimate coin buy params
func (o *EstimateCoinBuyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCoinCommission adds the coinCommission to the estimate coin buy params
func (o *EstimateCoinBuyParams) WithCoinCommission(coinCommission *string) *EstimateCoinBuyParams {
	o.SetCoinCommission(coinCommission)
	return o
}

// SetCoinCommission adds the coinCommission to the estimate coin buy params
func (o *EstimateCoinBuyParams) SetCoinCommission(coinCommission *string) {
	o.CoinCommission = coinCommission
}

// WithCoinIDCommission adds the coinIDCommission to the estimate coin buy params
func (o *EstimateCoinBuyParams) WithCoinIDCommission(coinIDCommission *uint64) *EstimateCoinBuyParams {
	o.SetCoinIDCommission(coinIDCommission)
	return o
}

// SetCoinIDCommission adds the coinIdCommission to the estimate coin buy params
func (o *EstimateCoinBuyParams) SetCoinIDCommission(coinIDCommission *uint64) {
	o.CoinIDCommission = coinIDCommission
}

// WithCoinIDToBuy adds the coinIDToBuy to the estimate coin buy params
func (o *EstimateCoinBuyParams) WithCoinIDToBuy(coinIDToBuy *uint64) *EstimateCoinBuyParams {
	o.SetCoinIDToBuy(coinIDToBuy)
	return o
}

// SetCoinIDToBuy adds the coinIdToBuy to the estimate coin buy params
func (o *EstimateCoinBuyParams) SetCoinIDToBuy(coinIDToBuy *uint64) {
	o.CoinIDToBuy = coinIDToBuy
}

// WithCoinIDToSell adds the coinIDToSell to the estimate coin buy params
func (o *EstimateCoinBuyParams) WithCoinIDToSell(coinIDToSell *uint64) *EstimateCoinBuyParams {
	o.SetCoinIDToSell(coinIDToSell)
	return o
}

// SetCoinIDToSell adds the coinIdToSell to the estimate coin buy params
func (o *EstimateCoinBuyParams) SetCoinIDToSell(coinIDToSell *uint64) {
	o.CoinIDToSell = coinIDToSell
}

// WithCoinToBuy adds the coinToBuy to the estimate coin buy params
func (o *EstimateCoinBuyParams) WithCoinToBuy(coinToBuy *string) *EstimateCoinBuyParams {
	o.SetCoinToBuy(coinToBuy)
	return o
}

// SetCoinToBuy adds the coinToBuy to the estimate coin buy params
func (o *EstimateCoinBuyParams) SetCoinToBuy(coinToBuy *string) {
	o.CoinToBuy = coinToBuy
}

// WithCoinToSell adds the coinToSell to the estimate coin buy params
func (o *EstimateCoinBuyParams) WithCoinToSell(coinToSell *string) *EstimateCoinBuyParams {
	o.SetCoinToSell(coinToSell)
	return o
}

// SetCoinToSell adds the coinToSell to the estimate coin buy params
func (o *EstimateCoinBuyParams) SetCoinToSell(coinToSell *string) {
	o.CoinToSell = coinToSell
}

// WithHeight adds the height to the estimate coin buy params
func (o *EstimateCoinBuyParams) WithHeight(height *uint64) *EstimateCoinBuyParams {
	o.SetHeight(height)
	return o
}

// SetHeight adds the height to the estimate coin buy params
func (o *EstimateCoinBuyParams) SetHeight(height *uint64) {
	o.Height = height
}

// WithRoute adds the route to the estimate coin buy params
func (o *EstimateCoinBuyParams) WithRoute(route []string) *EstimateCoinBuyParams {
	o.SetRoute(route)
	return o
}

// SetRoute adds the route to the estimate coin buy params
func (o *EstimateCoinBuyParams) SetRoute(route []string) {
	o.Route = route
}

// WithSwapFrom adds the swapFrom to the estimate coin buy params
func (o *EstimateCoinBuyParams) WithSwapFrom(swapFrom *string) *EstimateCoinBuyParams {
	o.SetSwapFrom(swapFrom)
	return o
}

// SetSwapFrom adds the swapFrom to the estimate coin buy params
func (o *EstimateCoinBuyParams) SetSwapFrom(swapFrom *string) {
	o.SwapFrom = swapFrom
}

// WithValueToBuy adds the valueToBuy to the estimate coin buy params
func (o *EstimateCoinBuyParams) WithValueToBuy(valueToBuy string) *EstimateCoinBuyParams {
	o.SetValueToBuy(valueToBuy)
	return o
}

// SetValueToBuy adds the valueToBuy to the estimate coin buy params
func (o *EstimateCoinBuyParams) SetValueToBuy(valueToBuy string) {
	o.ValueToBuy = valueToBuy
}

// WriteToRequest writes these params to a swagger request
func (o *EstimateCoinBuyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CoinCommission != nil {

		// query param coin_commission
		var qrCoinCommission string

		if o.CoinCommission != nil {
			qrCoinCommission = *o.CoinCommission
		}
		qCoinCommission := qrCoinCommission
		if qCoinCommission != "" {

			if err := r.SetQueryParam("coin_commission", qCoinCommission); err != nil {
				return err
			}
		}
	}

	if o.CoinIDCommission != nil {

		// query param coin_id_commission
		var qrCoinIDCommission uint64

		if o.CoinIDCommission != nil {
			qrCoinIDCommission = *o.CoinIDCommission
		}
		qCoinIDCommission := swag.FormatUint64(qrCoinIDCommission)
		if qCoinIDCommission != "" {

			if err := r.SetQueryParam("coin_id_commission", qCoinIDCommission); err != nil {
				return err
			}
		}
	}

	if o.CoinIDToBuy != nil {

		// query param coin_id_to_buy
		var qrCoinIDToBuy uint64

		if o.CoinIDToBuy != nil {
			qrCoinIDToBuy = *o.CoinIDToBuy
		}
		qCoinIDToBuy := swag.FormatUint64(qrCoinIDToBuy)
		if qCoinIDToBuy != "" {

			if err := r.SetQueryParam("coin_id_to_buy", qCoinIDToBuy); err != nil {
				return err
			}
		}
	}

	if o.CoinIDToSell != nil {

		// query param coin_id_to_sell
		var qrCoinIDToSell uint64

		if o.CoinIDToSell != nil {
			qrCoinIDToSell = *o.CoinIDToSell
		}
		qCoinIDToSell := swag.FormatUint64(qrCoinIDToSell)
		if qCoinIDToSell != "" {

			if err := r.SetQueryParam("coin_id_to_sell", qCoinIDToSell); err != nil {
				return err
			}
		}
	}

	if o.CoinToBuy != nil {

		// query param coin_to_buy
		var qrCoinToBuy string

		if o.CoinToBuy != nil {
			qrCoinToBuy = *o.CoinToBuy
		}
		qCoinToBuy := qrCoinToBuy
		if qCoinToBuy != "" {

			if err := r.SetQueryParam("coin_to_buy", qCoinToBuy); err != nil {
				return err
			}
		}
	}

	if o.CoinToSell != nil {

		// query param coin_to_sell
		var qrCoinToSell string

		if o.CoinToSell != nil {
			qrCoinToSell = *o.CoinToSell
		}
		qCoinToSell := qrCoinToSell
		if qCoinToSell != "" {

			if err := r.SetQueryParam("coin_to_sell", qCoinToSell); err != nil {
				return err
			}
		}
	}

	if o.Height != nil {

		// query param height
		var qrHeight uint64

		if o.Height != nil {
			qrHeight = *o.Height
		}
		qHeight := swag.FormatUint64(qrHeight)
		if qHeight != "" {

			if err := r.SetQueryParam("height", qHeight); err != nil {
				return err
			}
		}
	}

	if o.Route != nil {

		// binding items for route
		joinedRoute := o.bindParamRoute(reg)

		// query array param route
		if err := r.SetQueryParam("route", joinedRoute...); err != nil {
			return err
		}
	}

	if o.SwapFrom != nil {

		// query param swap_from
		var qrSwapFrom string

		if o.SwapFrom != nil {
			qrSwapFrom = *o.SwapFrom
		}
		qSwapFrom := qrSwapFrom
		if qSwapFrom != "" {

			if err := r.SetQueryParam("swap_from", qSwapFrom); err != nil {
				return err
			}
		}
	}

	// query param value_to_buy
	qrValueToBuy := o.ValueToBuy
	qValueToBuy := qrValueToBuy
	if qValueToBuy != "" {

		if err := r.SetQueryParam("value_to_buy", qValueToBuy); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamEstimateCoinBuy binds the parameter route
func (o *EstimateCoinBuyParams) bindParamRoute(formats strfmt.Registry) []string {
	routeIR := o.Route

	var routeIC []string
	for _, routeIIR := range routeIR { // explode []string

		routeIIV := routeIIR // string as string
		routeIC = append(routeIC, routeIIV)
	}

	// items.CollectionFormat: "multi"
	routeIS := swag.JoinByFormat(routeIC, "multi")

	return routeIS
}
