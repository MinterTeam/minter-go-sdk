// Code generated by go-swagger; DO NOT EDIT.

package api_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLimitOrdersOfPoolParams creates a new LimitOrdersOfPoolParams object
// with the default values initialized.
func NewLimitOrdersOfPoolParams() *LimitOrdersOfPoolParams {
	var (
		limitDefault = int32(3)
	)
	return &LimitOrdersOfPoolParams{
		Limit: &limitDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewLimitOrdersOfPoolParamsWithTimeout creates a new LimitOrdersOfPoolParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLimitOrdersOfPoolParamsWithTimeout(timeout time.Duration) *LimitOrdersOfPoolParams {
	var (
		limitDefault = int32(3)
	)
	return &LimitOrdersOfPoolParams{
		Limit: &limitDefault,

		timeout: timeout,
	}
}

// NewLimitOrdersOfPoolParamsWithContext creates a new LimitOrdersOfPoolParams object
// with the default values initialized, and the ability to set a context for a request
func NewLimitOrdersOfPoolParamsWithContext(ctx context.Context) *LimitOrdersOfPoolParams {
	var (
		limitDefault = int32(3)
	)
	return &LimitOrdersOfPoolParams{
		Limit: &limitDefault,

		Context: ctx,
	}
}

// NewLimitOrdersOfPoolParamsWithHTTPClient creates a new LimitOrdersOfPoolParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLimitOrdersOfPoolParamsWithHTTPClient(client *http.Client) *LimitOrdersOfPoolParams {
	var (
		limitDefault = int32(3)
	)
	return &LimitOrdersOfPoolParams{
		Limit:      &limitDefault,
		HTTPClient: client,
	}
}

/*LimitOrdersOfPoolParams contains all the parameters to send to the API endpoint
for the limit orders of pool operation typically these are written to a http.Request
*/
type LimitOrdersOfPoolParams struct {

	/*BuyCoin*/
	BuyCoin string
	/*Height*/
	Height *uint64
	/*Limit*/
	Limit *int32
	/*SellCoin*/
	SellCoin string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the limit orders of pool params
func (o *LimitOrdersOfPoolParams) WithTimeout(timeout time.Duration) *LimitOrdersOfPoolParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the limit orders of pool params
func (o *LimitOrdersOfPoolParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the limit orders of pool params
func (o *LimitOrdersOfPoolParams) WithContext(ctx context.Context) *LimitOrdersOfPoolParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the limit orders of pool params
func (o *LimitOrdersOfPoolParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the limit orders of pool params
func (o *LimitOrdersOfPoolParams) WithHTTPClient(client *http.Client) *LimitOrdersOfPoolParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the limit orders of pool params
func (o *LimitOrdersOfPoolParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBuyCoin adds the buyCoin to the limit orders of pool params
func (o *LimitOrdersOfPoolParams) WithBuyCoin(buyCoin string) *LimitOrdersOfPoolParams {
	o.SetBuyCoin(buyCoin)
	return o
}

// SetBuyCoin adds the buyCoin to the limit orders of pool params
func (o *LimitOrdersOfPoolParams) SetBuyCoin(buyCoin string) {
	o.BuyCoin = buyCoin
}

// WithHeight adds the height to the limit orders of pool params
func (o *LimitOrdersOfPoolParams) WithHeight(height *uint64) *LimitOrdersOfPoolParams {
	o.SetHeight(height)
	return o
}

// SetHeight adds the height to the limit orders of pool params
func (o *LimitOrdersOfPoolParams) SetHeight(height *uint64) {
	o.Height = height
}

// WithLimit adds the limit to the limit orders of pool params
func (o *LimitOrdersOfPoolParams) WithLimit(limit *int32) *LimitOrdersOfPoolParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the limit orders of pool params
func (o *LimitOrdersOfPoolParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithSellCoin adds the sellCoin to the limit orders of pool params
func (o *LimitOrdersOfPoolParams) WithSellCoin(sellCoin string) *LimitOrdersOfPoolParams {
	o.SetSellCoin(sellCoin)
	return o
}

// SetSellCoin adds the sellCoin to the limit orders of pool params
func (o *LimitOrdersOfPoolParams) SetSellCoin(sellCoin string) {
	o.SellCoin = sellCoin
}

// WriteToRequest writes these params to a swagger request
func (o *LimitOrdersOfPoolParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param buy_coin
	if err := r.SetPathParam("buy_coin", o.BuyCoin); err != nil {
		return err
	}

	if o.Height != nil {

		// query param height
		var qrHeight uint64
		if o.Height != nil {
			qrHeight = *o.Height
		}
		qHeight := swag.FormatUint64(qrHeight)
		if qHeight != "" {
			if err := r.SetQueryParam("height", qHeight); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	// path param sell_coin
	if err := r.SetPathParam("sell_coin", o.SellCoin); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
