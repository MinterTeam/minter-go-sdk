// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SwapPoolsResponseSwapPool swap pools response swap pool
//
// swagger:model SwapPoolsResponseSwapPool
type SwapPoolsResponseSwapPool struct {

	// amount0
	Amount0 string `json:"amount0,omitempty"`

	// amount1
	Amount1 string `json:"amount1,omitempty"`

	// coin0
	Coin0 uint64 `json:"coin0,omitempty,string"`

	// coin1
	Coin1 uint64 `json:"coin1,omitempty,string"`

	// id
	ID uint64 `json:"id,omitempty,string"`

	// liquidity
	Liquidity string `json:"liquidity,omitempty"`

	// orders buy
	OrdersBuy []*SwapPoolLimitOrder `json:"orders_buy"`

	// orders sell
	OrdersSell []*SwapPoolLimitOrder `json:"orders_sell"`

	// price
	Price string `json:"price,omitempty"`
}

// Validate validates this swap pools response swap pool
func (m *SwapPoolsResponseSwapPool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrdersBuy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrdersSell(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwapPoolsResponseSwapPool) validateOrdersBuy(formats strfmt.Registry) error {
	if swag.IsZero(m.OrdersBuy) { // not required
		return nil
	}

	for i := 0; i < len(m.OrdersBuy); i++ {
		if swag.IsZero(m.OrdersBuy[i]) { // not required
			continue
		}

		if m.OrdersBuy[i] != nil {
			if err := m.OrdersBuy[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orders_buy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SwapPoolsResponseSwapPool) validateOrdersSell(formats strfmt.Registry) error {
	if swag.IsZero(m.OrdersSell) { // not required
		return nil
	}

	for i := 0; i < len(m.OrdersSell); i++ {
		if swag.IsZero(m.OrdersSell[i]) { // not required
			continue
		}

		if m.OrdersSell[i] != nil {
			if err := m.OrdersSell[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orders_sell" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this swap pools response swap pool based on the context it is used
func (m *SwapPoolsResponseSwapPool) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrdersBuy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrdersSell(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwapPoolsResponseSwapPool) contextValidateOrdersBuy(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OrdersBuy); i++ {

		if m.OrdersBuy[i] != nil {
			if err := m.OrdersBuy[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orders_buy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SwapPoolsResponseSwapPool) contextValidateOrdersSell(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OrdersSell); i++ {

		if m.OrdersSell[i] != nil {
			if err := m.OrdersSell[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orders_sell" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SwapPoolsResponseSwapPool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwapPoolsResponseSwapPool) UnmarshalBinary(b []byte) error {
	var res SwapPoolsResponseSwapPool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
