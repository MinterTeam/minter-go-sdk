// Code generated by go-swagger; DO NOT EDIT.

package api_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewBestTradeParams creates a new BestTradeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewBestTradeParams() *BestTradeParams {
	return &BestTradeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewBestTradeParamsWithTimeout creates a new BestTradeParams object
// with the ability to set a timeout on a request.
func NewBestTradeParamsWithTimeout(timeout time.Duration) *BestTradeParams {
	return &BestTradeParams{
		timeout: timeout,
	}
}

// NewBestTradeParamsWithContext creates a new BestTradeParams object
// with the ability to set a context for a request.
func NewBestTradeParamsWithContext(ctx context.Context) *BestTradeParams {
	return &BestTradeParams{
		Context: ctx,
	}
}

// NewBestTradeParamsWithHTTPClient creates a new BestTradeParams object
// with the ability to set a custom HTTPClient for a request.
func NewBestTradeParamsWithHTTPClient(client *http.Client) *BestTradeParams {
	return &BestTradeParams{
		HTTPClient: client,
	}
}

/* BestTradeParams contains all the parameters to send to the API endpoint
   for the best trade operation.

   Typically these are written to a http.Request.
*/
type BestTradeParams struct {

	// Amount.
	Amount string

	// BuyCoin.
	//
	// Format: uint64
	BuyCoin string

	// Height.
	//
	// Format: uint64
	Height *uint64

	// MaxDepth.
	//
	// Format: int32
	// Default: 4
	MaxDepth *int32

	// SellCoin.
	//
	// Format: uint64
	SellCoin string

	// Type.
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the best trade params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *BestTradeParams) WithDefaults() *BestTradeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the best trade params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *BestTradeParams) SetDefaults() {
	var (
		maxDepthDefault = int32(4)
	)

	val := BestTradeParams{
		MaxDepth: &maxDepthDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the best trade params
func (o *BestTradeParams) WithTimeout(timeout time.Duration) *BestTradeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the best trade params
func (o *BestTradeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the best trade params
func (o *BestTradeParams) WithContext(ctx context.Context) *BestTradeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the best trade params
func (o *BestTradeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the best trade params
func (o *BestTradeParams) WithHTTPClient(client *http.Client) *BestTradeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the best trade params
func (o *BestTradeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAmount adds the amount to the best trade params
func (o *BestTradeParams) WithAmount(amount string) *BestTradeParams {
	o.SetAmount(amount)
	return o
}

// SetAmount adds the amount to the best trade params
func (o *BestTradeParams) SetAmount(amount string) {
	o.Amount = amount
}

// WithBuyCoin adds the buyCoin to the best trade params
func (o *BestTradeParams) WithBuyCoin(buyCoin string) *BestTradeParams {
	o.SetBuyCoin(buyCoin)
	return o
}

// SetBuyCoin adds the buyCoin to the best trade params
func (o *BestTradeParams) SetBuyCoin(buyCoin string) {
	o.BuyCoin = buyCoin
}

// WithHeight adds the height to the best trade params
func (o *BestTradeParams) WithHeight(height *uint64) *BestTradeParams {
	o.SetHeight(height)
	return o
}

// SetHeight adds the height to the best trade params
func (o *BestTradeParams) SetHeight(height *uint64) {
	o.Height = height
}

// WithMaxDepth adds the maxDepth to the best trade params
func (o *BestTradeParams) WithMaxDepth(maxDepth *int32) *BestTradeParams {
	o.SetMaxDepth(maxDepth)
	return o
}

// SetMaxDepth adds the maxDepth to the best trade params
func (o *BestTradeParams) SetMaxDepth(maxDepth *int32) {
	o.MaxDepth = maxDepth
}

// WithSellCoin adds the sellCoin to the best trade params
func (o *BestTradeParams) WithSellCoin(sellCoin string) *BestTradeParams {
	o.SetSellCoin(sellCoin)
	return o
}

// SetSellCoin adds the sellCoin to the best trade params
func (o *BestTradeParams) SetSellCoin(sellCoin string) {
	o.SellCoin = sellCoin
}

// WithType adds the typeVar to the best trade params
func (o *BestTradeParams) WithType(typeVar string) *BestTradeParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the best trade params
func (o *BestTradeParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *BestTradeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param amount
	if err := r.SetPathParam("amount", o.Amount); err != nil {
		return err
	}

	// path param buy_coin
	if err := r.SetPathParam("buy_coin", o.BuyCoin); err != nil {
		return err
	}

	if o.Height != nil {

		// query param height
		var qrHeight uint64

		if o.Height != nil {
			qrHeight = *o.Height
		}
		qHeight := swag.FormatUint64(qrHeight)
		if qHeight != "" {

			if err := r.SetQueryParam("height", qHeight); err != nil {
				return err
			}
		}
	}

	if o.MaxDepth != nil {

		// query param max_depth
		var qrMaxDepth int32

		if o.MaxDepth != nil {
			qrMaxDepth = *o.MaxDepth
		}
		qMaxDepth := swag.FormatInt32(qrMaxDepth)
		if qMaxDepth != "" {

			if err := r.SetQueryParam("max_depth", qMaxDepth); err != nil {
				return err
			}
		}
	}

	// path param sell_coin
	if err := r.SetPathParam("sell_coin", o.SellCoin); err != nil {
		return err
	}

	// path param type
	if err := r.SetPathParam("type", o.Type); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
