// Code generated by go-swagger; DO NOT EDIT.

package api_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFrozenAllParams creates a new FrozenAllParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFrozenAllParams() *FrozenAllParams {
	return &FrozenAllParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFrozenAllParamsWithTimeout creates a new FrozenAllParams object
// with the ability to set a timeout on a request.
func NewFrozenAllParamsWithTimeout(timeout time.Duration) *FrozenAllParams {
	return &FrozenAllParams{
		timeout: timeout,
	}
}

// NewFrozenAllParamsWithContext creates a new FrozenAllParams object
// with the ability to set a context for a request.
func NewFrozenAllParamsWithContext(ctx context.Context) *FrozenAllParams {
	return &FrozenAllParams{
		Context: ctx,
	}
}

// NewFrozenAllParamsWithHTTPClient creates a new FrozenAllParams object
// with the ability to set a custom HTTPClient for a request.
func NewFrozenAllParamsWithHTTPClient(client *http.Client) *FrozenAllParams {
	return &FrozenAllParams{
		HTTPClient: client,
	}
}

/* FrozenAllParams contains all the parameters to send to the API endpoint
   for the frozen all operation.

   Typically these are written to a http.Request.
*/
type FrozenAllParams struct {

	// Addresses.
	Addresses []string

	// CoinIds.
	CoinIds []string

	// EndHeight.
	//
	// Format: uint64
	EndHeight *uint64

	// Height.
	//
	// Format: uint64
	Height *uint64

	// StartHeight.
	//
	// Format: uint64
	StartHeight *uint64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the frozen all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FrozenAllParams) WithDefaults() *FrozenAllParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the frozen all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FrozenAllParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the frozen all params
func (o *FrozenAllParams) WithTimeout(timeout time.Duration) *FrozenAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the frozen all params
func (o *FrozenAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the frozen all params
func (o *FrozenAllParams) WithContext(ctx context.Context) *FrozenAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the frozen all params
func (o *FrozenAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the frozen all params
func (o *FrozenAllParams) WithHTTPClient(client *http.Client) *FrozenAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the frozen all params
func (o *FrozenAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddresses adds the addresses to the frozen all params
func (o *FrozenAllParams) WithAddresses(addresses []string) *FrozenAllParams {
	o.SetAddresses(addresses)
	return o
}

// SetAddresses adds the addresses to the frozen all params
func (o *FrozenAllParams) SetAddresses(addresses []string) {
	o.Addresses = addresses
}

// WithCoinIds adds the coinIds to the frozen all params
func (o *FrozenAllParams) WithCoinIds(coinIds []string) *FrozenAllParams {
	o.SetCoinIds(coinIds)
	return o
}

// SetCoinIds adds the coinIds to the frozen all params
func (o *FrozenAllParams) SetCoinIds(coinIds []string) {
	o.CoinIds = coinIds
}

// WithEndHeight adds the endHeight to the frozen all params
func (o *FrozenAllParams) WithEndHeight(endHeight *uint64) *FrozenAllParams {
	o.SetEndHeight(endHeight)
	return o
}

// SetEndHeight adds the endHeight to the frozen all params
func (o *FrozenAllParams) SetEndHeight(endHeight *uint64) {
	o.EndHeight = endHeight
}

// WithHeight adds the height to the frozen all params
func (o *FrozenAllParams) WithHeight(height *uint64) *FrozenAllParams {
	o.SetHeight(height)
	return o
}

// SetHeight adds the height to the frozen all params
func (o *FrozenAllParams) SetHeight(height *uint64) {
	o.Height = height
}

// WithStartHeight adds the startHeight to the frozen all params
func (o *FrozenAllParams) WithStartHeight(startHeight *uint64) *FrozenAllParams {
	o.SetStartHeight(startHeight)
	return o
}

// SetStartHeight adds the startHeight to the frozen all params
func (o *FrozenAllParams) SetStartHeight(startHeight *uint64) {
	o.StartHeight = startHeight
}

// WriteToRequest writes these params to a swagger request
func (o *FrozenAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Addresses != nil {

		// binding items for addresses
		joinedAddresses := o.bindParamAddresses(reg)

		// query array param addresses
		if err := r.SetQueryParam("addresses", joinedAddresses...); err != nil {
			return err
		}
	}

	if o.CoinIds != nil {

		// binding items for coin_ids
		joinedCoinIds := o.bindParamCoinIds(reg)

		// query array param coin_ids
		if err := r.SetQueryParam("coin_ids", joinedCoinIds...); err != nil {
			return err
		}
	}

	if o.EndHeight != nil {

		// query param end_height
		var qrEndHeight uint64

		if o.EndHeight != nil {
			qrEndHeight = *o.EndHeight
		}
		qEndHeight := swag.FormatUint64(qrEndHeight)
		if qEndHeight != "" {

			if err := r.SetQueryParam("end_height", qEndHeight); err != nil {
				return err
			}
		}
	}

	if o.Height != nil {

		// query param height
		var qrHeight uint64

		if o.Height != nil {
			qrHeight = *o.Height
		}
		qHeight := swag.FormatUint64(qrHeight)
		if qHeight != "" {

			if err := r.SetQueryParam("height", qHeight); err != nil {
				return err
			}
		}
	}

	if o.StartHeight != nil {

		// query param start_height
		var qrStartHeight uint64

		if o.StartHeight != nil {
			qrStartHeight = *o.StartHeight
		}
		qStartHeight := swag.FormatUint64(qrStartHeight)
		if qStartHeight != "" {

			if err := r.SetQueryParam("start_height", qStartHeight); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamFrozenAll binds the parameter addresses
func (o *FrozenAllParams) bindParamAddresses(formats strfmt.Registry) []string {
	addressesIR := o.Addresses

	var addressesIC []string
	for _, addressesIIR := range addressesIR { // explode []string

		addressesIIV := addressesIIR // string as string
		addressesIC = append(addressesIC, addressesIIV)
	}

	// items.CollectionFormat: "multi"
	addressesIS := swag.JoinByFormat(addressesIC, "multi")

	return addressesIS
}

// bindParamFrozenAll binds the parameter coin_ids
func (o *FrozenAllParams) bindParamCoinIds(formats strfmt.Registry) []string {
	coinIdsIR := o.CoinIds

	var coinIdsIC []string
	for _, coinIdsIIR := range coinIdsIR { // explode []string

		coinIdsIIV := coinIdsIIR // string as string
		coinIdsIC = append(coinIdsIC, coinIdsIIV)
	}

	// items.CollectionFormat: "multi"
	coinIdsIS := swag.JoinByFormat(coinIdsIC, "multi")

	return coinIdsIS
}
