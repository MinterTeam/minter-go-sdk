// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LimitOrderResponse limit order response
//
// swagger:model LimitOrderResponse
type LimitOrderResponse struct {

	// coin buy
	CoinBuy *Coin `json:"coin_buy,omitempty"`

	// coin sell
	CoinSell *Coin `json:"coin_sell,omitempty"`

	// height
	Height uint64 `json:"height,omitempty,string"`

	// id
	ID uint64 `json:"id,omitempty,string"`

	// owner
	Owner string `json:"owner,omitempty"`

	// want buy
	WantBuy string `json:"want_buy,omitempty"`

	// want sell
	WantSell string `json:"want_sell,omitempty"`
}

// Validate validates this limit order response
func (m *LimitOrderResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCoinBuy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoinSell(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LimitOrderResponse) validateCoinBuy(formats strfmt.Registry) error {

	if swag.IsZero(m.CoinBuy) { // not required
		return nil
	}

	if m.CoinBuy != nil {
		if err := m.CoinBuy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coin_buy")
			}
			return err
		}
	}

	return nil
}

func (m *LimitOrderResponse) validateCoinSell(formats strfmt.Registry) error {

	if swag.IsZero(m.CoinSell) { // not required
		return nil
	}

	if m.CoinSell != nil {
		if err := m.CoinSell.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coin_sell")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LimitOrderResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LimitOrderResponse) UnmarshalBinary(b []byte) error {
	var res LimitOrderResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
