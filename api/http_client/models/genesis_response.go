// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GenesisResponse genesis response
//
// swagger:model GenesisResponse
type GenesisResponse struct {

	// app hash
	AppHash string `json:"app_hash,omitempty"`

	// app state
	AppState *GenesisResponseAppState `json:"app_state,omitempty"`

	// chain id
	ChainID string `json:"chain_id,omitempty"`

	// consensus params
	ConsensusParams *GenesisResponseConsensusParams `json:"consensus_params,omitempty"`

	// genesis time
	GenesisTime string `json:"genesis_time,omitempty"`

	// initial height
	InitialHeight uint64 `json:"initial_height,omitempty,string"`
}

// Validate validates this genesis response
func (m *GenesisResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsensusParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GenesisResponse) validateAppState(formats strfmt.Registry) error {
	if swag.IsZero(m.AppState) { // not required
		return nil
	}

	if m.AppState != nil {
		if err := m.AppState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app_state")
			}
			return err
		}
	}

	return nil
}

func (m *GenesisResponse) validateConsensusParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsensusParams) { // not required
		return nil
	}

	if m.ConsensusParams != nil {
		if err := m.ConsensusParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consensus_params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this genesis response based on the context it is used
func (m *GenesisResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsensusParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GenesisResponse) contextValidateAppState(ctx context.Context, formats strfmt.Registry) error {

	if m.AppState != nil {
		if err := m.AppState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app_state")
			}
			return err
		}
	}

	return nil
}

func (m *GenesisResponse) contextValidateConsensusParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsensusParams != nil {
		if err := m.ConsensusParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consensus_params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GenesisResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GenesisResponse) UnmarshalBinary(b []byte) error {
	var res GenesisResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
