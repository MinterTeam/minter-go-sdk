// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APIPbBlockResponse api pb block response
//
// swagger:model api_pbBlockResponse
type APIPbBlockResponse struct {

	// block reward
	BlockReward string `json:"block_reward,omitempty"`

	// evidence
	Evidence *APIPbBlockResponseEvidence `json:"evidence,omitempty"`

	// hash
	Hash string `json:"hash,omitempty"`

	// height
	Height string `json:"height,omitempty"`

	// missed
	Missed []string `json:"missed"`

	// proposer
	Proposer string `json:"proposer,omitempty"`

	// size
	Size string `json:"size,omitempty"`

	// time
	Time string `json:"time,omitempty"`

	// transaction count
	TransactionCount string `json:"transaction_count,omitempty"`

	// transactions
	Transactions []*BlockResponseTransaction `json:"transactions"`

	// validators
	Validators []*APIPbBlockResponseValidator `json:"validators"`
}

// Validate validates this api pb block response
func (m *APIPbBlockResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvidence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidators(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIPbBlockResponse) validateEvidence(formats strfmt.Registry) error {

	if swag.IsZero(m.Evidence) { // not required
		return nil
	}

	if m.Evidence != nil {
		if err := m.Evidence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evidence")
			}
			return err
		}
	}

	return nil
}

func (m *APIPbBlockResponse) validateTransactions(formats strfmt.Registry) error {

	if swag.IsZero(m.Transactions) { // not required
		return nil
	}

	for i := 0; i < len(m.Transactions); i++ {
		if swag.IsZero(m.Transactions[i]) { // not required
			continue
		}

		if m.Transactions[i] != nil {
			if err := m.Transactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIPbBlockResponse) validateValidators(formats strfmt.Registry) error {

	if swag.IsZero(m.Validators) { // not required
		return nil
	}

	for i := 0; i < len(m.Validators); i++ {
		if swag.IsZero(m.Validators[i]) { // not required
			continue
		}

		if m.Validators[i] != nil {
			if err := m.Validators[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIPbBlockResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIPbBlockResponse) UnmarshalBinary(b []byte) error {
	var res APIPbBlockResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
