// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BestTradeRequestType best trade request type
//
// swagger:model BestTradeRequestType
type BestTradeRequestType string

func NewBestTradeRequestType(value BestTradeRequestType) *BestTradeRequestType {
	v := value
	return &v
}

const (

	// BestTradeRequestTypeInput captures enum value "input"
	BestTradeRequestTypeInput BestTradeRequestType = "input"

	// BestTradeRequestTypeOutput captures enum value "output"
	BestTradeRequestTypeOutput BestTradeRequestType = "output"
)

// for schema
var bestTradeRequestTypeEnum []interface{}

func init() {
	var res []BestTradeRequestType
	if err := json.Unmarshal([]byte(`["input","output"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bestTradeRequestTypeEnum = append(bestTradeRequestTypeEnum, v)
	}
}

func (m BestTradeRequestType) validateBestTradeRequestTypeEnum(path, location string, value BestTradeRequestType) error {
	if err := validate.EnumCase(path, location, value, bestTradeRequestTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this best trade request type
func (m BestTradeRequestType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBestTradeRequestTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this best trade request type based on context it is used
func (m BestTradeRequestType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
