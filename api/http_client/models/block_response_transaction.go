// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BlockResponseTransaction block response transaction
//
// swagger:model BlockResponseTransaction
type BlockResponseTransaction struct {

	// code
	Code string `json:"code,omitempty"`

	// data
	Data *ProtobufAny `json:"data,omitempty"`

	// from
	From string `json:"from,omitempty"`

	// gas
	Gas string `json:"gas,omitempty"`

	// gas coin
	GasCoin string `json:"gas_coin,omitempty"`

	// gas price
	GasPrice string `json:"gas_price,omitempty"`

	// hash
	Hash string `json:"hash,omitempty"`

	// log
	Log string `json:"log,omitempty"`

	// nonce
	Nonce string `json:"nonce,omitempty"`

	// payload
	// Format: byte
	Payload strfmt.Base64 `json:"payload,omitempty"`

	// raw tx
	RawTx string `json:"raw_tx,omitempty"`

	// service data
	// Format: byte
	ServiceData strfmt.Base64 `json:"service_data,omitempty"`

	// tags
	Tags map[string]string `json:"tags,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this block response transaction
func (m *BlockResponseTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockResponseTransaction) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockResponseTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockResponseTransaction) UnmarshalBinary(b []byte) error {
	var res BlockResponseTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
