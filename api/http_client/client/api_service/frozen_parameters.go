// Code generated by go-swagger; DO NOT EDIT.

package api_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewFrozenParams creates a new FrozenParams object
// with the default values initialized.
func NewFrozenParams() *FrozenParams {
	var ()
	return &FrozenParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewFrozenParamsWithTimeout creates a new FrozenParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewFrozenParamsWithTimeout(timeout time.Duration) *FrozenParams {
	var ()
	return &FrozenParams{

		timeout: timeout,
	}
}

// NewFrozenParamsWithContext creates a new FrozenParams object
// with the default values initialized, and the ability to set a context for a request
func NewFrozenParamsWithContext(ctx context.Context) *FrozenParams {
	var ()
	return &FrozenParams{

		Context: ctx,
	}
}

// NewFrozenParamsWithHTTPClient creates a new FrozenParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewFrozenParamsWithHTTPClient(client *http.Client) *FrozenParams {
	var ()
	return &FrozenParams{
		HTTPClient: client,
	}
}

/*FrozenParams contains all the parameters to send to the API endpoint
for the frozen operation typically these are written to a http.Request
*/
type FrozenParams struct {

	/*Address*/
	Address string
	/*Coin*/
	Coin *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the frozen params
func (o *FrozenParams) WithTimeout(timeout time.Duration) *FrozenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the frozen params
func (o *FrozenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the frozen params
func (o *FrozenParams) WithContext(ctx context.Context) *FrozenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the frozen params
func (o *FrozenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the frozen params
func (o *FrozenParams) WithHTTPClient(client *http.Client) *FrozenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the frozen params
func (o *FrozenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddress adds the address to the frozen params
func (o *FrozenParams) WithAddress(address string) *FrozenParams {
	o.SetAddress(address)
	return o
}

// SetAddress adds the address to the frozen params
func (o *FrozenParams) SetAddress(address string) {
	o.Address = address
}

// WithCoin adds the coin to the frozen params
func (o *FrozenParams) WithCoin(coin *string) *FrozenParams {
	o.SetCoin(coin)
	return o
}

// SetCoin adds the coin to the frozen params
func (o *FrozenParams) SetCoin(coin *string) {
	o.Coin = coin
}

// WriteToRequest writes these params to a swagger request
func (o *FrozenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param address
	if err := r.SetPathParam("address", o.Address); err != nil {
		return err
	}

	if o.Coin != nil {

		// query param coin
		var qrCoin string
		if o.Coin != nil {
			qrCoin = *o.Coin
		}
		qCoin := qrCoin
		if qCoin != "" {
			if err := r.SetQueryParam("coin", qCoin); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
