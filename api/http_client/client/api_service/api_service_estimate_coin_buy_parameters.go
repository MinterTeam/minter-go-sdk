// Code generated by go-swagger; DO NOT EDIT.

package api_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAPIServiceEstimateCoinBuyParams creates a new APIServiceEstimateCoinBuyParams object
// with the default values initialized.
func NewAPIServiceEstimateCoinBuyParams() *APIServiceEstimateCoinBuyParams {
	var ()
	return &APIServiceEstimateCoinBuyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAPIServiceEstimateCoinBuyParamsWithTimeout creates a new APIServiceEstimateCoinBuyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAPIServiceEstimateCoinBuyParamsWithTimeout(timeout time.Duration) *APIServiceEstimateCoinBuyParams {
	var ()
	return &APIServiceEstimateCoinBuyParams{

		timeout: timeout,
	}
}

// NewAPIServiceEstimateCoinBuyParamsWithContext creates a new APIServiceEstimateCoinBuyParams object
// with the default values initialized, and the ability to set a context for a request
func NewAPIServiceEstimateCoinBuyParamsWithContext(ctx context.Context) *APIServiceEstimateCoinBuyParams {
	var ()
	return &APIServiceEstimateCoinBuyParams{

		Context: ctx,
	}
}

// NewAPIServiceEstimateCoinBuyParamsWithHTTPClient creates a new APIServiceEstimateCoinBuyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAPIServiceEstimateCoinBuyParamsWithHTTPClient(client *http.Client) *APIServiceEstimateCoinBuyParams {
	var ()
	return &APIServiceEstimateCoinBuyParams{
		HTTPClient: client,
	}
}

/*APIServiceEstimateCoinBuyParams contains all the parameters to send to the API endpoint
for the Api service estimate coin buy operation typically these are written to a http.Request
*/
type APIServiceEstimateCoinBuyParams struct {

	/*CoinIDToBuy*/
	CoinIDToBuy *int64
	/*CoinIDToSell*/
	CoinIDToSell *int64
	/*CoinToBuy*/
	CoinToBuy *string
	/*CoinToSell*/
	CoinToSell *string
	/*Height*/
	Height *string
	/*ValueToBuy*/
	ValueToBuy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the Api service estimate coin buy params
func (o *APIServiceEstimateCoinBuyParams) WithTimeout(timeout time.Duration) *APIServiceEstimateCoinBuyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the Api service estimate coin buy params
func (o *APIServiceEstimateCoinBuyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the Api service estimate coin buy params
func (o *APIServiceEstimateCoinBuyParams) WithContext(ctx context.Context) *APIServiceEstimateCoinBuyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the Api service estimate coin buy params
func (o *APIServiceEstimateCoinBuyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the Api service estimate coin buy params
func (o *APIServiceEstimateCoinBuyParams) WithHTTPClient(client *http.Client) *APIServiceEstimateCoinBuyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the Api service estimate coin buy params
func (o *APIServiceEstimateCoinBuyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCoinIDToBuy adds the coinIDToBuy to the Api service estimate coin buy params
func (o *APIServiceEstimateCoinBuyParams) WithCoinIDToBuy(coinIDToBuy *int64) *APIServiceEstimateCoinBuyParams {
	o.SetCoinIDToBuy(coinIDToBuy)
	return o
}

// SetCoinIDToBuy adds the coinIdToBuy to the Api service estimate coin buy params
func (o *APIServiceEstimateCoinBuyParams) SetCoinIDToBuy(coinIDToBuy *int64) {
	o.CoinIDToBuy = coinIDToBuy
}

// WithCoinIDToSell adds the coinIDToSell to the Api service estimate coin buy params
func (o *APIServiceEstimateCoinBuyParams) WithCoinIDToSell(coinIDToSell *int64) *APIServiceEstimateCoinBuyParams {
	o.SetCoinIDToSell(coinIDToSell)
	return o
}

// SetCoinIDToSell adds the coinIdToSell to the Api service estimate coin buy params
func (o *APIServiceEstimateCoinBuyParams) SetCoinIDToSell(coinIDToSell *int64) {
	o.CoinIDToSell = coinIDToSell
}

// WithCoinToBuy adds the coinToBuy to the Api service estimate coin buy params
func (o *APIServiceEstimateCoinBuyParams) WithCoinToBuy(coinToBuy *string) *APIServiceEstimateCoinBuyParams {
	o.SetCoinToBuy(coinToBuy)
	return o
}

// SetCoinToBuy adds the coinToBuy to the Api service estimate coin buy params
func (o *APIServiceEstimateCoinBuyParams) SetCoinToBuy(coinToBuy *string) {
	o.CoinToBuy = coinToBuy
}

// WithCoinToSell adds the coinToSell to the Api service estimate coin buy params
func (o *APIServiceEstimateCoinBuyParams) WithCoinToSell(coinToSell *string) *APIServiceEstimateCoinBuyParams {
	o.SetCoinToSell(coinToSell)
	return o
}

// SetCoinToSell adds the coinToSell to the Api service estimate coin buy params
func (o *APIServiceEstimateCoinBuyParams) SetCoinToSell(coinToSell *string) {
	o.CoinToSell = coinToSell
}

// WithHeight adds the height to the Api service estimate coin buy params
func (o *APIServiceEstimateCoinBuyParams) WithHeight(height *string) *APIServiceEstimateCoinBuyParams {
	o.SetHeight(height)
	return o
}

// SetHeight adds the height to the Api service estimate coin buy params
func (o *APIServiceEstimateCoinBuyParams) SetHeight(height *string) {
	o.Height = height
}

// WithValueToBuy adds the valueToBuy to the Api service estimate coin buy params
func (o *APIServiceEstimateCoinBuyParams) WithValueToBuy(valueToBuy *string) *APIServiceEstimateCoinBuyParams {
	o.SetValueToBuy(valueToBuy)
	return o
}

// SetValueToBuy adds the valueToBuy to the Api service estimate coin buy params
func (o *APIServiceEstimateCoinBuyParams) SetValueToBuy(valueToBuy *string) {
	o.ValueToBuy = valueToBuy
}

// WriteToRequest writes these params to a swagger request
func (o *APIServiceEstimateCoinBuyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CoinIDToBuy != nil {

		// query param coin_id_to_buy
		var qrCoinIDToBuy int64
		if o.CoinIDToBuy != nil {
			qrCoinIDToBuy = *o.CoinIDToBuy
		}
		qCoinIDToBuy := swag.FormatInt64(qrCoinIDToBuy)
		if qCoinIDToBuy != "" {
			if err := r.SetQueryParam("coin_id_to_buy", qCoinIDToBuy); err != nil {
				return err
			}
		}

	}

	if o.CoinIDToSell != nil {

		// query param coin_id_to_sell
		var qrCoinIDToSell int64
		if o.CoinIDToSell != nil {
			qrCoinIDToSell = *o.CoinIDToSell
		}
		qCoinIDToSell := swag.FormatInt64(qrCoinIDToSell)
		if qCoinIDToSell != "" {
			if err := r.SetQueryParam("coin_id_to_sell", qCoinIDToSell); err != nil {
				return err
			}
		}

	}

	if o.CoinToBuy != nil {

		// query param coin_to_buy
		var qrCoinToBuy string
		if o.CoinToBuy != nil {
			qrCoinToBuy = *o.CoinToBuy
		}
		qCoinToBuy := qrCoinToBuy
		if qCoinToBuy != "" {
			if err := r.SetQueryParam("coin_to_buy", qCoinToBuy); err != nil {
				return err
			}
		}

	}

	if o.CoinToSell != nil {

		// query param coin_to_sell
		var qrCoinToSell string
		if o.CoinToSell != nil {
			qrCoinToSell = *o.CoinToSell
		}
		qCoinToSell := qrCoinToSell
		if qCoinToSell != "" {
			if err := r.SetQueryParam("coin_to_sell", qCoinToSell); err != nil {
				return err
			}
		}

	}

	if o.Height != nil {

		// query param height
		var qrHeight string
		if o.Height != nil {
			qrHeight = *o.Height
		}
		qHeight := qrHeight
		if qHeight != "" {
			if err := r.SetQueryParam("height", qHeight); err != nil {
				return err
			}
		}

	}

	if o.ValueToBuy != nil {

		// query param value_to_buy
		var qrValueToBuy string
		if o.ValueToBuy != nil {
			qrValueToBuy = *o.ValueToBuy
		}
		qValueToBuy := qrValueToBuy
		if qValueToBuy != "" {
			if err := r.SetQueryParam("value_to_buy", qValueToBuy); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
