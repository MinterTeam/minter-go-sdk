// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NetInfoResponsePeer net info response peer
//
// swagger:model NetInfoResponsePeer
type NetInfoResponsePeer struct {

	// connection status
	ConnectionStatus *PeerConnectionStatus `json:"connection_status,omitempty"`

	// is outbound
	IsOutbound bool `json:"is_outbound,omitempty"`

	// latest block height
	LatestBlockHeight string `json:"latest_block_height,omitempty"`

	// node info
	NodeInfo *NodeInfo `json:"node_info,omitempty"`

	// remote ip
	RemoteIP string `json:"remote_ip,omitempty"`
}

// Validate validates this net info response peer
func (m *NetInfoResponsePeer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetInfoResponsePeer) validateConnectionStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectionStatus) { // not required
		return nil
	}

	if m.ConnectionStatus != nil {
		if err := m.ConnectionStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connection_status")
			}
			return err
		}
	}

	return nil
}

func (m *NetInfoResponsePeer) validateNodeInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeInfo) { // not required
		return nil
	}

	if m.NodeInfo != nil {
		if err := m.NodeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetInfoResponsePeer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetInfoResponsePeer) UnmarshalBinary(b []byte) error {
	var res NetInfoResponsePeer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
