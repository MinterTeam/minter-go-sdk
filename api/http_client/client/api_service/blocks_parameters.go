// Code generated by go-swagger; DO NOT EDIT.

package api_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewBlocksParams creates a new BlocksParams object
// with the default values initialized.
func NewBlocksParams() *BlocksParams {
	var (
		eventsDefault    = bool(false)
		failedTxsDefault = bool(false)
	)
	return &BlocksParams{
		Events:    &eventsDefault,
		FailedTxs: &failedTxsDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewBlocksParamsWithTimeout creates a new BlocksParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewBlocksParamsWithTimeout(timeout time.Duration) *BlocksParams {
	var (
		eventsDefault    = bool(false)
		failedTxsDefault = bool(false)
	)
	return &BlocksParams{
		Events:    &eventsDefault,
		FailedTxs: &failedTxsDefault,

		timeout: timeout,
	}
}

// NewBlocksParamsWithContext creates a new BlocksParams object
// with the default values initialized, and the ability to set a context for a request
func NewBlocksParamsWithContext(ctx context.Context) *BlocksParams {
	var (
		eventsDefault    = bool(false)
		failedTxsDefault = bool(false)
	)
	return &BlocksParams{
		Events:    &eventsDefault,
		FailedTxs: &failedTxsDefault,

		Context: ctx,
	}
}

// NewBlocksParamsWithHTTPClient creates a new BlocksParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewBlocksParamsWithHTTPClient(client *http.Client) *BlocksParams {
	var (
		eventsDefault    = bool(false)
		failedTxsDefault = bool(false)
	)
	return &BlocksParams{
		Events:     &eventsDefault,
		FailedTxs:  &failedTxsDefault,
		HTTPClient: client,
	}
}

/*BlocksParams contains all the parameters to send to the API endpoint
for the blocks operation typically these are written to a http.Request
*/
type BlocksParams struct {

	/*Events*/
	Events *bool
	/*FailedTxs*/
	FailedTxs *bool
	/*Fields*/
	Fields []string
	/*FromHeight*/
	FromHeight uint64
	/*ToHeight*/
	ToHeight uint64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the blocks params
func (o *BlocksParams) WithTimeout(timeout time.Duration) *BlocksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the blocks params
func (o *BlocksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the blocks params
func (o *BlocksParams) WithContext(ctx context.Context) *BlocksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the blocks params
func (o *BlocksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the blocks params
func (o *BlocksParams) WithHTTPClient(client *http.Client) *BlocksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the blocks params
func (o *BlocksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEvents adds the events to the blocks params
func (o *BlocksParams) WithEvents(events *bool) *BlocksParams {
	o.SetEvents(events)
	return o
}

// SetEvents adds the events to the blocks params
func (o *BlocksParams) SetEvents(events *bool) {
	o.Events = events
}

// WithFailedTxs adds the failedTxs to the blocks params
func (o *BlocksParams) WithFailedTxs(failedTxs *bool) *BlocksParams {
	o.SetFailedTxs(failedTxs)
	return o
}

// SetFailedTxs adds the failedTxs to the blocks params
func (o *BlocksParams) SetFailedTxs(failedTxs *bool) {
	o.FailedTxs = failedTxs
}

// WithFields adds the fields to the blocks params
func (o *BlocksParams) WithFields(fields []string) *BlocksParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the blocks params
func (o *BlocksParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithFromHeight adds the fromHeight to the blocks params
func (o *BlocksParams) WithFromHeight(fromHeight uint64) *BlocksParams {
	o.SetFromHeight(fromHeight)
	return o
}

// SetFromHeight adds the fromHeight to the blocks params
func (o *BlocksParams) SetFromHeight(fromHeight uint64) {
	o.FromHeight = fromHeight
}

// WithToHeight adds the toHeight to the blocks params
func (o *BlocksParams) WithToHeight(toHeight uint64) *BlocksParams {
	o.SetToHeight(toHeight)
	return o
}

// SetToHeight adds the toHeight to the blocks params
func (o *BlocksParams) SetToHeight(toHeight uint64) {
	o.ToHeight = toHeight
}

// WriteToRequest writes these params to a swagger request
func (o *BlocksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Events != nil {

		// query param events
		var qrEvents bool
		if o.Events != nil {
			qrEvents = *o.Events
		}
		qEvents := swag.FormatBool(qrEvents)
		if qEvents != "" {
			if err := r.SetQueryParam("events", qEvents); err != nil {
				return err
			}
		}

	}

	if o.FailedTxs != nil {

		// query param failed_txs
		var qrFailedTxs bool
		if o.FailedTxs != nil {
			qrFailedTxs = *o.FailedTxs
		}
		qFailedTxs := swag.FormatBool(qrFailedTxs)
		if qFailedTxs != "" {
			if err := r.SetQueryParam("failed_txs", qFailedTxs); err != nil {
				return err
			}
		}

	}

	valuesFields := o.Fields

	joinedFields := swag.JoinByFormat(valuesFields, "multi")
	// query array param fields
	if err := r.SetQueryParam("fields", joinedFields...); err != nil {
		return err
	}

	// query param from_height
	qrFromHeight := o.FromHeight
	qFromHeight := swag.FormatUint64(qrFromHeight)
	if qFromHeight != "" {
		if err := r.SetQueryParam("from_height", qFromHeight); err != nil {
			return err
		}
	}

	// query param to_height
	qrToHeight := o.ToHeight
	qToHeight := swag.FormatUint64(qrToHeight)
	if qToHeight != "" {
		if err := r.SetQueryParam("to_height", qToHeight); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
