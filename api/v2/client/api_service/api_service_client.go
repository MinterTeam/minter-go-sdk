// Code generated by go-swagger; DO NOT EDIT.

package api_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new api service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for api service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	APIServiceAddress(params *APIServiceAddressParams) (*APIServiceAddressOK, error)

	APIServiceAddresses(params *APIServiceAddressesParams) (*APIServiceAddressesOK, error)

	APIServiceBlock(params *APIServiceBlockParams) (*APIServiceBlockOK, error)

	APIServiceCandidate(params *APIServiceCandidateParams) (*APIServiceCandidateOK, error)

	APIServiceCandidates(params *APIServiceCandidatesParams) (*APIServiceCandidatesOK, error)

	APIServiceCoinInfo(params *APIServiceCoinInfoParams) (*APIServiceCoinInfoOK, error)

	APIServiceCoinInfoByID(params *APIServiceCoinInfoByIDParams) (*APIServiceCoinInfoByIDOK, error)

	APIServiceEstimateCoinBuy(params *APIServiceEstimateCoinBuyParams) (*APIServiceEstimateCoinBuyOK, error)

	APIServiceEstimateCoinSell(params *APIServiceEstimateCoinSellParams) (*APIServiceEstimateCoinSellOK, error)

	APIServiceEstimateCoinSellAll(params *APIServiceEstimateCoinSellAllParams) (*APIServiceEstimateCoinSellAllOK, error)

	APIServiceEstimateTxCommission(params *APIServiceEstimateTxCommissionParams) (*APIServiceEstimateTxCommissionOK, error)

	APIServiceEvents(params *APIServiceEventsParams) (*APIServiceEventsOK, error)

	APIServiceFrozen(params *APIServiceFrozenParams) (*APIServiceFrozenOK, error)

	APIServiceGenesis(params *APIServiceGenesisParams) (*APIServiceGenesisOK, error)

	APIServiceHalts(params *APIServiceHaltsParams) (*APIServiceHaltsOK, error)

	APIServiceMaxGas(params *APIServiceMaxGasParams) (*APIServiceMaxGasOK, error)

	APIServiceMinGasPrice(params *APIServiceMinGasPriceParams) (*APIServiceMinGasPriceOK, error)

	APIServiceMissedBlocks(params *APIServiceMissedBlocksParams) (*APIServiceMissedBlocksOK, error)

	APIServiceNetInfo(params *APIServiceNetInfoParams) (*APIServiceNetInfoOK, error)

	APIServiceSendTransaction(params *APIServiceSendTransactionParams) (*APIServiceSendTransactionOK, error)

	APIServiceSendTransaction2(params *APIServiceSendTransaction2Params) (*APIServiceSendTransaction2OK, error)

	APIServiceStatus(params *APIServiceStatusParams) (*APIServiceStatusOK, error)

	APIServiceSubscribe(params *APIServiceSubscribeParams) (*APIServiceSubscribeOK, error)

	APIServiceTransaction(params *APIServiceTransactionParams) (*APIServiceTransactionOK, error)

	APIServiceTransactions(params *APIServiceTransactionsParams) (*APIServiceTransactionsOK, error)

	APIServiceUnconfirmedTxs(params *APIServiceUnconfirmedTxsParams) (*APIServiceUnconfirmedTxsOK, error)

	APIServiceValidators(params *APIServiceValidatorsParams) (*APIServiceValidatorsOK, error)

	APIServiceWaitList(params *APIServiceWaitListParams) (*APIServiceWaitListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  APIServiceAddress returns coins list balance and transaction count of an address
*/
func (a *Client) APIServiceAddress(params *APIServiceAddressParams) (*APIServiceAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_Address",
		Method:             "GET",
		PathPattern:        "/address/{address}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceAddressDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceAddresses returns list of addresses
*/
func (a *Client) APIServiceAddresses(params *APIServiceAddressesParams) (*APIServiceAddressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceAddressesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_Addresses",
		Method:             "GET",
		PathPattern:        "/addresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceAddressesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceAddressesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceAddressesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceBlock returns block data at given height
*/
func (a *Client) APIServiceBlock(params *APIServiceBlockParams) (*APIServiceBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceBlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_Block",
		Method:             "GET",
		PathPattern:        "/block/{height}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceBlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceBlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceBlockDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceCandidate returns candidate s info by provided public key it will respond with 404 code if candidate is not found
*/
func (a *Client) APIServiceCandidate(params *APIServiceCandidateParams) (*APIServiceCandidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceCandidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_Candidate",
		Method:             "GET",
		PathPattern:        "/candidate/{public_key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceCandidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceCandidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceCandidateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceCandidates returns list of candidates
*/
func (a *Client) APIServiceCandidates(params *APIServiceCandidatesParams) (*APIServiceCandidatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceCandidatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_Candidates",
		Method:             "GET",
		PathPattern:        "/candidates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceCandidatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceCandidatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceCandidatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceCoinInfo returns information about coin symbol note this method does not return information about base coins m n t and b IP
*/
func (a *Client) APIServiceCoinInfo(params *APIServiceCoinInfoParams) (*APIServiceCoinInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceCoinInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_CoinInfo",
		Method:             "GET",
		PathPattern:        "/coin_info/{symbol}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceCoinInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceCoinInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceCoinInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceCoinInfoByID returns information about coin ID note this method does not return information about base coins m n t and b IP
*/
func (a *Client) APIServiceCoinInfoByID(params *APIServiceCoinInfoByIDParams) (*APIServiceCoinInfoByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceCoinInfoByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_CoinInfoById",
		Method:             "GET",
		PathPattern:        "/coin_info_by_id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceCoinInfoByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceCoinInfoByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceCoinInfoByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceEstimateCoinBuy returns estimate of buy coin transaction
*/
func (a *Client) APIServiceEstimateCoinBuy(params *APIServiceEstimateCoinBuyParams) (*APIServiceEstimateCoinBuyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceEstimateCoinBuyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_EstimateCoinBuy",
		Method:             "GET",
		PathPattern:        "/estimate_coin_buy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceEstimateCoinBuyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceEstimateCoinBuyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceEstimateCoinBuyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceEstimateCoinSell returns estimate of sell coin transaction
*/
func (a *Client) APIServiceEstimateCoinSell(params *APIServiceEstimateCoinSellParams) (*APIServiceEstimateCoinSellOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceEstimateCoinSellParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_EstimateCoinSell",
		Method:             "GET",
		PathPattern:        "/estimate_coin_sell",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceEstimateCoinSellReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceEstimateCoinSellOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceEstimateCoinSellDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceEstimateCoinSellAll returns estimate of sell all coin transaction
*/
func (a *Client) APIServiceEstimateCoinSellAll(params *APIServiceEstimateCoinSellAllParams) (*APIServiceEstimateCoinSellAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceEstimateCoinSellAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_EstimateCoinSellAll",
		Method:             "GET",
		PathPattern:        "/estimate_coin_sell_all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceEstimateCoinSellAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceEstimateCoinSellAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceEstimateCoinSellAllDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceEstimateTxCommission returns estimate of transaction
*/
func (a *Client) APIServiceEstimateTxCommission(params *APIServiceEstimateTxCommissionParams) (*APIServiceEstimateTxCommissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceEstimateTxCommissionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_EstimateTxCommission",
		Method:             "GET",
		PathPattern:        "/estimate_tx_commission/{tx}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceEstimateTxCommissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceEstimateTxCommissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceEstimateTxCommissionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceEvents returns events at given height
*/
func (a *Client) APIServiceEvents(params *APIServiceEventsParams) (*APIServiceEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_Events",
		Method:             "GET",
		PathPattern:        "/events/{height}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceFrozen returns frozen balance
*/
func (a *Client) APIServiceFrozen(params *APIServiceFrozenParams) (*APIServiceFrozenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceFrozenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_Frozen",
		Method:             "GET",
		PathPattern:        "/frozen",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceFrozenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceFrozenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceFrozenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceGenesis returns genesis file
*/
func (a *Client) APIServiceGenesis(params *APIServiceGenesisParams) (*APIServiceGenesisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceGenesisParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_Genesis",
		Method:             "GET",
		PathPattern:        "/genesis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceGenesisReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceGenesisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceGenesisDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceHalts halts
*/
func (a *Client) APIServiceHalts(params *APIServiceHaltsParams) (*APIServiceHaltsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceHaltsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_Halts",
		Method:             "GET",
		PathPattern:        "/halts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceHaltsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceHaltsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceHaltsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceMaxGas returns current max gas
*/
func (a *Client) APIServiceMaxGas(params *APIServiceMaxGasParams) (*APIServiceMaxGasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceMaxGasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_MaxGas",
		Method:             "GET",
		PathPattern:        "/max_gas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceMaxGasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceMaxGasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceMaxGasDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceMinGasPrice returns current min gas price
*/
func (a *Client) APIServiceMinGasPrice(params *APIServiceMinGasPriceParams) (*APIServiceMinGasPriceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceMinGasPriceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_MinGasPrice",
		Method:             "GET",
		PathPattern:        "/min_gas_price",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceMinGasPriceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceMinGasPriceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceMinGasPriceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceMissedBlocks returns missed blocks by validator public key
*/
func (a *Client) APIServiceMissedBlocks(params *APIServiceMissedBlocksParams) (*APIServiceMissedBlocksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceMissedBlocksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_MissedBlocks",
		Method:             "GET",
		PathPattern:        "/missed_blocks/{public_key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceMissedBlocksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceMissedBlocksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceMissedBlocksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceNetInfo returns network info
*/
func (a *Client) APIServiceNetInfo(params *APIServiceNetInfoParams) (*APIServiceNetInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceNetInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_NetInfo",
		Method:             "GET",
		PathPattern:        "/net_info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceNetInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceNetInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceNetInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceSendTransaction returns the result of sending signed tx to ensure that transaction was successfully committed to the blockchain you need to find the transaction by the hash and ensure that the status code equals to 0
*/
func (a *Client) APIServiceSendTransaction(params *APIServiceSendTransactionParams) (*APIServiceSendTransactionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceSendTransactionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_SendTransaction",
		Method:             "GET",
		PathPattern:        "/send_transaction/{tx}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceSendTransactionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceSendTransactionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceSendTransactionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceSendTransaction2 returns the result of sending signed tx to ensure that transaction was successfully committed to the blockchain you need to find the transaction by the hash and ensure that the status code equals to 0
*/
func (a *Client) APIServiceSendTransaction2(params *APIServiceSendTransaction2Params) (*APIServiceSendTransaction2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceSendTransaction2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_SendTransaction2",
		Method:             "POST",
		PathPattern:        "/send_transaction",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceSendTransaction2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceSendTransaction2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceSendTransaction2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceStatus returns node status including pubkey latest block
*/
func (a *Client) APIServiceStatus(params *APIServiceStatusParams) (*APIServiceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_Status",
		Method:             "GET",
		PathPattern:        "/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceSubscribe returns a subscription for events by query
*/
func (a *Client) APIServiceSubscribe(params *APIServiceSubscribeParams) (*APIServiceSubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceSubscribeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_Subscribe",
		Method:             "GET",
		PathPattern:        "/subscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceSubscribeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceSubscribeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceSubscribeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceTransaction returns transaction info
*/
func (a *Client) APIServiceTransaction(params *APIServiceTransactionParams) (*APIServiceTransactionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceTransactionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_Transaction",
		Method:             "GET",
		PathPattern:        "/transaction/{hash}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceTransactionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceTransactionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceTransactionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceTransactions returns transactions by query
*/
func (a *Client) APIServiceTransactions(params *APIServiceTransactionsParams) (*APIServiceTransactionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceTransactionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_Transactions",
		Method:             "GET",
		PathPattern:        "/transactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceTransactionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceTransactionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceTransactionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceUnconfirmedTxs returns unconfirmed transactions
*/
func (a *Client) APIServiceUnconfirmedTxs(params *APIServiceUnconfirmedTxsParams) (*APIServiceUnconfirmedTxsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceUnconfirmedTxsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_UnconfirmedTxs",
		Method:             "GET",
		PathPattern:        "/unconfirmed_txs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceUnconfirmedTxsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceUnconfirmedTxsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceUnconfirmedTxsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceValidators returns list of active validators
*/
func (a *Client) APIServiceValidators(params *APIServiceValidatorsParams) (*APIServiceValidatorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceValidatorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_Validators",
		Method:             "GET",
		PathPattern:        "/validators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceValidatorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceValidatorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceValidatorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  APIServiceWaitList returns the list of address stakes in waitlist
*/
func (a *Client) APIServiceWaitList(params *APIServiceWaitListParams) (*APIServiceWaitListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIServiceWaitListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiService_WaitList",
		Method:             "GET",
		PathPattern:        "/waitlist/{public_key}/{address}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &APIServiceWaitListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIServiceWaitListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*APIServiceWaitListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
