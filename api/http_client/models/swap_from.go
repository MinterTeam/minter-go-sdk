// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SwapFrom swap from
//
// swagger:model SwapFrom
type SwapFrom string

func NewSwapFrom(value SwapFrom) *SwapFrom {
	v := value
	return &v
}

const (

	// SwapFromOptimal captures enum value "optimal"
	SwapFromOptimal SwapFrom = "optimal"

	// SwapFromBancor captures enum value "bancor"
	SwapFromBancor SwapFrom = "bancor"

	// SwapFromPool captures enum value "pool"
	SwapFromPool SwapFrom = "pool"
)

// for schema
var swapFromEnum []interface{}

func init() {
	var res []SwapFrom
	if err := json.Unmarshal([]byte(`["optimal","bancor","pool"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		swapFromEnum = append(swapFromEnum, v)
	}
}

func (m SwapFrom) validateSwapFromEnum(path, location string, value SwapFrom) error {
	if err := validate.EnumCase(path, location, value, swapFromEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this swap from
func (m SwapFrom) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSwapFromEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this swap from based on context it is used
func (m SwapFrom) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
