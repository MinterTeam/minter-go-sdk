// Code generated by go-swagger; DO NOT EDIT.

package api_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewBlockParams creates a new BlockParams object
// with the default values initialized.
func NewBlockParams() *BlockParams {
	var (
		failedTxsDefault = bool(false)
	)
	return &BlockParams{
		FailedTxs: &failedTxsDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewBlockParamsWithTimeout creates a new BlockParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewBlockParamsWithTimeout(timeout time.Duration) *BlockParams {
	var (
		failedTxsDefault = bool(false)
	)
	return &BlockParams{
		FailedTxs: &failedTxsDefault,

		timeout: timeout,
	}
}

// NewBlockParamsWithContext creates a new BlockParams object
// with the default values initialized, and the ability to set a context for a request
func NewBlockParamsWithContext(ctx context.Context) *BlockParams {
	var (
		failedTxsDefault = bool(false)
	)
	return &BlockParams{
		FailedTxs: &failedTxsDefault,

		Context: ctx,
	}
}

// NewBlockParamsWithHTTPClient creates a new BlockParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewBlockParamsWithHTTPClient(client *http.Client) *BlockParams {
	var (
		failedTxsDefault = bool(false)
	)
	return &BlockParams{
		FailedTxs:  &failedTxsDefault,
		HTTPClient: client,
	}
}

/*BlockParams contains all the parameters to send to the API endpoint
for the block operation typically these are written to a http.Request
*/
type BlockParams struct {

	/*FailedTxs*/
	FailedTxs *bool
	/*Fields*/
	Fields []string
	/*Height*/
	Height string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the block params
func (o *BlockParams) WithTimeout(timeout time.Duration) *BlockParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the block params
func (o *BlockParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the block params
func (o *BlockParams) WithContext(ctx context.Context) *BlockParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the block params
func (o *BlockParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the block params
func (o *BlockParams) WithHTTPClient(client *http.Client) *BlockParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the block params
func (o *BlockParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFailedTxs adds the failedTxs to the block params
func (o *BlockParams) WithFailedTxs(failedTxs *bool) *BlockParams {
	o.SetFailedTxs(failedTxs)
	return o
}

// SetFailedTxs adds the failedTxs to the block params
func (o *BlockParams) SetFailedTxs(failedTxs *bool) {
	o.FailedTxs = failedTxs
}

// WithFields adds the fields to the block params
func (o *BlockParams) WithFields(fields []string) *BlockParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the block params
func (o *BlockParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithHeight adds the height to the block params
func (o *BlockParams) WithHeight(height string) *BlockParams {
	o.SetHeight(height)
	return o
}

// SetHeight adds the height to the block params
func (o *BlockParams) SetHeight(height string) {
	o.Height = height
}

// WriteToRequest writes these params to a swagger request
func (o *BlockParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FailedTxs != nil {

		// query param failed_txs
		var qrFailedTxs bool
		if o.FailedTxs != nil {
			qrFailedTxs = *o.FailedTxs
		}
		qFailedTxs := swag.FormatBool(qrFailedTxs)
		if qFailedTxs != "" {
			if err := r.SetQueryParam("failed_txs", qFailedTxs); err != nil {
				return err
			}
		}

	}

	valuesFields := o.Fields

	joinedFields := swag.JoinByFormat(valuesFields, "multi")
	// query array param fields
	if err := r.SetQueryParam("fields", joinedFields...); err != nil {
		return err
	}

	// path param height
	if err := r.SetPathParam("height", o.Height); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
